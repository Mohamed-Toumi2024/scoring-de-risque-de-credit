pipeline {
    agent any

    environment {
        PYTHON = "/usr/bin/python3"
        VENV = ".venv"
        IMAGE_NAME = "fastapi-app"
        CONTAINER_NAME = "fastapi-container"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'R√©cup√©ration du code depuis Git...'
                checkout scm
            }
        }

        stage('Setup Python Environment') {
            steps {
                echo 'Cr√©ation de l‚Äôenvironnement virtuel et installation des d√©pendances...'
                sh '''
                #!/bin/bash
                if [ ! -d "$VENV" ]; then
                    python3 -m venv $VENV
                fi
                . $VENV/bin/activate
                pip install --upgrade pip
                pip install -r backend/requirements.txt
                '''
            }
        }

        stage('Train Model') {
            steps {
                echo 'Entra√Ænement du mod√®le XGBoost...'
                sh '''
                #!/bin/bash
                . $VENV/bin/activate
                python backend/ml_pipeline/model_pipeline.py
                '''
            }
        }

        stage('Deploy API') {
            steps {
                echo 'Lancement de l‚ÄôAPI FastAPI...'
                sh '''
                #!/bin/bash
                . $VENV/bin/activate
                nohup uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
                sleep 5
                '''
            }
        }

      stage('Test API') {
    steps {
        echo 'Test de l‚ÄôAPI pour v√©rifier le d√©ploiement...'
        script {
            def retries = 5
            def success = false
            for (int i = 0; i < retries; i++) {
                try {
                    sh 'curl -f http://127.0.0.1:8000/docs'
                    success = true
                    break
                } catch (err) {
                    echo "API not ready yet, retrying..."
                    sleep 5
                }
            }
            if (!success) {
                error "API test failed after retries"
            }
        }
    }
}


        // üöÄ Nouveaux stages pour Dockerisation
        stage('Build Docker Image') {
            steps {
                echo 'Construction de l‚Äôimage Docker...'
                sh '''
                docker build -t $IMAGE_NAME ./backend
                '''
            }
        }

        stage('Run Docker Container') {
            steps {
                echo 'Lancement du container Docker...'
                sh '''
                docker rm -f $CONTAINER_NAME || true
                docker run -d --name $CONTAINER_NAME -p 8000:8000 $IMAGE_NAME
                sleep 5
                '''
            }
        }

        stage('Test API in Docker') {
            steps {
                echo 'Test de l‚ÄôAPI dans le container...'
                sh '''
                curl -f http://127.0.0.1:8000/docs || exit 1
                '''
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©. V√©rifiez les logs Jenkins.'
        }
    }
}
